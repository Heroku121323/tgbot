"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import time
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputMediaPhoto
from telegram.ext import ContextTypes
from config import PARTS_LIST, IMAGES
from src.database.db_manager import save_user, save_order, get_user_orders, save_support_message
from src.utils.message_utils import update_main_message, delete_user_message

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}
user_parts = {}
user_contact = {}
last_order_time = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await save_user(user.id, user.username, user.first_name, user.last_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏", callback_data="cat_parts")],
        [InlineKeyboardButton("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", callback_data="cat_accessories")],
        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_other")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")]
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    try:
        with open(IMAGES['start_menu'], 'rb') as photo:
            message = await update.message.reply_photo(
                photo=photo,
                caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrueParts82!\n"
                        "–ó–¥–µ—Å—å –≥–æ–≤–æ—Ä—è—Ç –Ω–∞ —è–∑—ã–∫–µ –¥–µ—Ç–∞–ª–µ–π - —á–µ—Å—Ç–Ω–æ, –ø–æ –¥–µ–ª—É –∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ –∫–ª–∏–µ–Ω—Ç—É.\n"
                        "üì© –ü–∏—à–∏ —Å—Ä–∞–∑—É: –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥, —á—Ç–æ –∏—â–µ—à—å - –ø–æ–¥–±–µ—Ä—ë–º, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–º!\n"
                        "üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –†–§, –æ—Ç–≤–µ—Ç –ø–æ –¥–µ–ª—É, –±–µ–∑ '–ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–∫–ª–∞–¥–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é'.\n"
                        "üéØ –ó–¥–µ—Å—å –±—ã—Å—Ç—Ä–æ, —á—ë—Ç–∫–æ –∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ.\n\n"
                        "üëá –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except FileNotFoundError:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        message = await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrueParts82!\n"
            "–ó–¥–µ—Å—å –≥–æ–≤–æ—Ä—è—Ç –Ω–∞ —è–∑—ã–∫–µ –¥–µ—Ç–∞–ª–µ–π - —á–µ—Å—Ç–Ω–æ, –ø–æ –¥–µ–ª—É –∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ –∫–ª–∏–µ–Ω—Ç—É.\n"
            "üì© –ü–∏—à–∏ —Å—Ä–∞–∑—É: –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥, —á—Ç–æ –∏—â–µ—à—å - –ø–æ–¥–±–µ—Ä—ë–º, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–º!\n"
            "üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –†–§, –æ—Ç–≤–µ—Ç –ø–æ –¥–µ–ª—É, –±–µ–∑ '–ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–∫–ª–∞–¥–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é'.\n"
            "üéØ –ó–¥–µ—Å—å –±—ã—Å—Ç—Ä–æ, —á—ë—Ç–∫–æ –∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ.\n\n"
            "üëá –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['main_message_id'] = message.message_id


async def handle_user_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ callback query
        if "Query is too old" in str(e) or "query id is invalid" in str(e):
            return
        else:
            raise e
    
    uid = query.from_user.id
    data = query.data

    if data.startswith("cat_"):
        cat = data.split("_", 1)[1]
        user_state[uid] = {"category": cat, "step": "choosing"}
        user_parts[uid] = []
        if cat == "parts":
            buttons = [InlineKeyboardButton(p, callback_data=f"part_{i}") for i, p in enumerate(PARTS_LIST)]
            rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
            rows.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done_parts")])
            await update_main_message(update, context, "üõ† –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏:", rows)
        else:
            user_state[uid]["step"] = "waiting_contact"
            await update_main_message(update, context, "‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    elif data.startswith("part_"):
        idx = int(data.split("_", 1)[1])
        part = PARTS_LIST[idx]
        sel = user_parts.get(uid, [])
        if part in sel:
            sel.remove(part)
        else:
            sel.append(part)
        buttons = [InlineKeyboardButton(("‚úÖ " + p) if p in sel else p, callback_data=f"part_{i}") for i, p in enumerate(PARTS_LIST)]
        rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
        rows.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done_parts")])
        await update_main_message(update, context, "üõ† –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏:", rows)

    elif data == "done_parts":
        if not user_parts.get(uid):
            return await query.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–ø—á–∞—Å—Ç—å.")
        user_state[uid]["step"] = "waiting_contact"
        await update_main_message(update, context, "‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    elif data == "support":
        user_state[uid] = {"step": "support_mode"}
        await query.message.reply_text(
            "üì¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –ø—Ä—è–º–æ —Å—é–¥–∞ ‚Äî –Ω–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n"
            "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )

    elif data == "my_orders":
        orders = await get_user_orders(uid)
        if not orders:
            await query.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        else:
            text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
            for order in orders:
                status_emoji = "‚úÖ" if order[5] == "completed" else "‚è≥"
                text += f"{status_emoji} –ó–∞–∫–∞–∑ #{order[0]}\n"
                text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order[1]}\n"
                text += f"üîß –ó–∞–ø—á–∞—Å—Ç–∏: {order[2]}\n"
                text += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {order[3]}\n"
                text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order[4]}\n"
                text += f"üìÖ –î–∞—Ç–∞: {order[6]}\n\n"
            await query.message.reply_text(text)

    elif data == "new_order":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_state.pop(uid, None)
        user_parts.pop(uid, None)
        user_contact.pop(uid, None)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("–ê–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏", callback_data="cat_parts")],
            [InlineKeyboardButton("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", callback_data="cat_accessories")],
            [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data="cat_other")],
            [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
            [InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")]
        ]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            with open(IMAGES['start_menu'], 'rb') as photo:
                await context.bot.edit_message_media(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data.get('main_message_id'),
                    media=InputMediaPhoto(
                        media=photo,
                        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrueParts82!\n"
                                "–ó–¥–µ—Å—å –≥–æ–≤–æ—Ä—è—Ç –Ω–∞ —è–∑—ã–∫–µ –¥–µ—Ç–∞–ª–µ–π - —á–µ—Å—Ç–Ω–æ, –ø–æ –¥–µ–ª—É –∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ –∫–ª–∏–µ–Ω—Ç—É.\n"
                                "üì© –ü–∏—à–∏ —Å—Ä–∞–∑—É: –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥, —á—Ç–æ –∏—â–µ—à—å - –ø–æ–¥–±–µ—Ä—ë–º, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–º!\n"
                                "üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –†–§, –æ—Ç–≤–µ—Ç –ø–æ –¥–µ–ª—É, –±–µ–∑ '–ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–∫–ª–∞–¥–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é'.\n"
                                "üéØ –ó–¥–µ—Å—å –±—ã—Å—Ç—Ä–æ, —á—ë—Ç–∫–æ –∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ.\n\n"
                                "üëá –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:"
                    ),
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await update_main_message(
                update, context,
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrueParts82!\n"
                "–ó–¥–µ—Å—å –≥–æ–≤–æ—Ä—è—Ç –Ω–∞ —è–∑—ã–∫–µ –¥–µ—Ç–∞–ª–µ–π - —á–µ—Å—Ç–Ω–æ, –ø–æ –¥–µ–ª—É –∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∫ –∫–ª–∏–µ–Ω—Ç—É.\n"
                "üì© –ü–∏—à–∏ —Å—Ä–∞–∑—É: –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥, —á—Ç–æ –∏—â–µ—à—å - –ø–æ–¥–±–µ—Ä—ë–º, –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–º!\n"
                "üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –†–§, –æ—Ç–≤–µ—Ç –ø–æ –¥–µ–ª—É, –±–µ–∑ '–ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–∫–ª–∞–¥–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é'.\n"
                "üéØ –ó–¥–µ—Å—å –±—ã—Å—Ç—Ä–æ, —á—ë—Ç–∫–æ –∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ.\n\n"
                "üëá –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:",
                keyboard
            )


async def handle_user_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    uid = user.id
    now = time.time()

    if uid not in user_state:
        return await update.message.reply_text("‚ùó –ù–∞—á–Ω–∏—Ç–µ —Å /start")

    step = user_state[uid].get("step")
    text = update.message.text.strip()

    if now - last_order_time.get(uid, 0) < 30:
        return await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏.")

    if step == "waiting_contact":
        if len(text) < 5:
            await delete_user_message(update, context)
            return await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä.")
        
        user_contact[uid] = text
        user_state[uid]["step"] = "waiting_notes"
        await delete_user_message(update, context)
        await update_main_message(update, context, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ VIN –∫–æ–¥ (–∏–ª–∏ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã) –∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑:")
        return

    if step == "waiting_notes":
        if len(text) < 5:
            await delete_user_message(update, context)
            return await update.message.reply_text("‚ö†Ô∏è –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        
        last_order_time[uid] = now
        category = user_state[uid]["category"]
        parts = ", ".join(user_parts.get(uid, [])) if category == "parts" else "-"
        contact = user_contact.get(uid, "-")
        notes = text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        order_id = await save_order(uid, category, parts, contact, notes)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_user_message(update, context)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        back_keyboard = [[InlineKeyboardButton("üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="new_order")]]
        
        await update_main_message(
            update, context,
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n\n"
            f"–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            back_keyboard
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        from config import ADMINS
        msg = (
            f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç @{user.username or user.first_name}:\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"üîß –ó–∞–ø—á–∞—Å—Ç–∏: {parts}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {notes}"
        )
        for a in ADMINS:
            await context.bot.send_message(chat_id=a, text=msg)

        user_state.pop(uid, None)
        user_parts.pop(uid, None)
        user_contact.pop(uid, None)

    if step == "support_mode":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await save_support_message(uid, text)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await delete_user_message(update, context)
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        from config import ADMINS
        username = user.username or user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        support_msg = (
            f"üìû –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üë§ @{username} (ID: {uid})\n"
            f"üí¨ {text}"
        )
        for admin_id in ADMINS:
            await context.bot.send_message(chat_id=admin_id, text=support_msg)
        
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º!\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
